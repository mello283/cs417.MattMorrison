#include <bits/stdc++.h>
#include <vector>
#include <algorithm>
using namespace std;

const int MAX_SIZE = 10;

template <typename T>
class adjList
{
    public:
        vector<int> adj[MAX_SIZE];
        void addEdge(T u, T v)
        {
            adj[u].push_back(v);
        }
        void printGraph()
        {
            for (T v = 0; v < MAX_SIZE; ++v) {
                cout << "\n Adjacency list of vertex " << v
                     << "\n head ";
                for (auto x : adj[v])
                {
                    cout << "-> " << x;
                }
                cout<<endl;
            }
        }
        void addNode(T x)
        {
            adj[x].push_back(x);
        }
        vector<T> neighbors(T x)
        {   
            vector<T>neighborhood;
            for(auto y : adj[x])
            {
                neighborhood.push_back(y);
            }
            return neighborhood;
        }
        bool adjacent(T x,T y)
        {
            if(count(adj[x].begin(), adj[x].end(), y)) //source: https://www.techiedelight.com/check-vector-contains-given-element-cpp/
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        void deleteEdge(T source, T dest)
        {
            if(count(adj[source].begin(),adj[source].end(),dest))
            {
                adj[source].erase(adj[source].begin() + dest);//source: https://www.geeksforgeeks.org/add-and-remove-edge-in-adjacency-list-representation-of-a-graph/
            }
            else
            {
                cout<<"Could not find edge for deletion";
            }
        }
        void deleteNode(T node)
        {
            adj[node].clear();
        }
        bool isCycle(vector<int> cycles)
        {
            //look at the path given 
            vector<int>::iterator cIt = cycles.begin();
            vector<int>::iterator cIt2 = std::next(cIt,1);
            vector<bool> visited;
            vector<bool>::iterator visitIt = visited.begin();
            for(auto x : cycles)
            {
                if(adjacent(*cIt,*cIt2)||cIt==cycles.begin())
                {
                    visited.push_back(true);
                    cout<<*cIt<<" "<<*cIt2<<" true"<<endl;
                    advance(cIt,1);
                    advance(cIt2,1);
                }
                else
                {
                    visited.push_back(false);           
                    cout<<*cIt<<" "<<*cIt2<<" false"<<endl;
                    advance(cIt,1);
                    advance(cIt2,1);
                }

            }
            
            //if all paths are true it means theres a connected cycle
            bool finalCycCheck = true;
            for(auto x : visited)
            {
                if(x == false)
                {
                    finalCycCheck = false;
                }
                advance(visitIt,1);
            }
            return finalCycCheck;
        }
            
};
template <typename T>
class adjMatrix
{
    public:
        int currentSize=5;
        T grid[MAX_SIZE][MAX_SIZE];
        adjMatrix()
        {
            for(int y=0;y<currentSize;y++)
            {
                for(int x=0;x<currentSize;x++)
                {
                    grid[x][y]=0;
                    if(x==y)
                    {
                        grid[x][y]=1;
                    }
                }
            }
        }
        void addEdge(T u, T v)
        {
            grid[u][v]=1;
        }
        void printGraph()
        {
            for(int y=0;y<currentSize;y++)
            {
                for(int x=0;x<currentSize;x++)
                {
                    cout<<grid[x][y]<<" ";
                }
                cout<<endl;
            }
        }
        void addNode(T x)
        {
            int xCoord = x;
            grid[xCoord][xCoord]=1;
        }
        vector<T> neighbors(T x)
        {
            vector<T> possibleNeighbors;
            for(int pos=0;pos<currentSize;pos++)
            {
                if(adjacent(x,pos))
                {
                    possibleNeighbors.push_back(pos);
                }
            }
            return possibleNeighbors;
        }
        bool adjacent(T x,T y)
        {
            bool adjacentTo=false;
            if(grid[x][y]==1)
            {
                adjacentTo = true;
            }
            return adjacentTo;
            
        }
        void deleteEdge(T source, T dest)
        {
            grid[source][dest]=0;
        }
        void deleteNode(T node)
        {
            for(int i=0;i<currentSize;i++)
            {
                grid[node][i]=0;
                grid[i][node]=0;
            }
        }
        bool isCycle(vector<int> cycles)
        {
            //look at the path given 
            vector<int>::iterator cIt = cycles.begin();
            vector<int>::iterator cIt2 = std::next(cIt,1);
            vector<bool> visited;
            vector<bool>::iterator visitIt = visited.begin();
            for(auto x : cycles)
            {
                if(adjacent(*cIt,*cIt2)||cIt==cycles.begin())
                {
                    visited.push_back(true);
                    cout<<*cIt<<" "<<*cIt2<<" true"<<endl;
                    advance(cIt,1);
                    advance(cIt2,1);
                }
                else
                {
                    visited.push_back(false);           
                    cout<<*cIt<<" "<<*cIt2<<" false"<<endl;
                    advance(cIt,1);
                    advance(cIt2,1);
                }

            }
            
            //if all paths are true it means theres a connected cycle
            bool finalCycCheck = true;
            for(auto x : visited)
            {
                if(x == false)
                {
                    finalCycCheck = false;
                }
                advance(visitIt,1);
            }
            return finalCycCheck;
        }
};


int main()
{
    adjList<int> list;
    adjMatrix<int> matrix;
    
    for(int i=0;i<MAX_SIZE;i++)
    {
        list.addNode(i);
        matrix.addNode(i);
    }
    
    list.addEdge(0,1);
    list.addEdge(0,2);
    list.addEdge(0,5);
    list.addEdge(2,1);

    //just to show that the neighbor method works
    vector<int>neighborVect = list.neighbors(0);
    vector<int>::iterator pos = neighborVect.begin();
    for(auto x : neighborVect)
    {
        advance(pos,1);
    }
    list.adjacent(2,1);
    list.deleteEdge(0,1);
    list.deleteNode(2);
    
    matrix.addEdge(0,4);
    matrix.addEdge(0,3);
    matrix.addEdge(3,4);
    matrix.addEdge(4,3);
    matrix.addEdge(3,0);
    matrix.addEdge(4,0);
    //matrix.deleteNode(0);
    matrix.addNode(0);
    vector<int> nei = matrix.neighbors(0);
    vector<int>::iterator nIt = nei.begin();
    for(auto x : nei)
    {
        advance(nIt,1);
    }
    vector<int> lNei = list.neighbors(0);
    
    vector<int> cyc;
    
    //user input for path
    int path = 0;
    do
    {
        cout<<"\nEnter your path using 0-9\n";
        cin>>path;
        if(path>-1)
        {
            cyc.push_back(path);
        }
    }while(path>-1);
    

    
    cout<<"\nCycle test\n\n";
    cout<<"\nMatrix\n";
    if(matrix.isCycle(cyc))
    {
        cout<<"\n There is a cycle\n";
    }
    else
    {
        cout<<"\n There is not a cycle\n";
    }
    cout<<endl;
    cout<<"\nList\n";
    if(list.isCycle(cyc))
    {
        cout<<"\n There is a cycle\n";
    }
    else
    {
        cout<<"\n There is not a cycle\n";
    }
    return 0;
}

//Starting code found at https://www.geeksforgeeks.org/graph-and-its-representations/
